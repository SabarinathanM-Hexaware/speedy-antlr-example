/*
 * This file was auto-generated by speedy-antlr-tool v1.4.3
 *  https://github.com/amykyta3/speedy-antlr-tool
 */

#include "sa_natural_translator.h"


SA_NaturalTranslator::SA_NaturalTranslator(speedy_antlr::Translator *translator) {
    this->translator = translator;
}

SA_NaturalTranslator::~SA_NaturalTranslator() {
    Py_XDECREF(ProgramContext_cls);
    Py_XDECREF(LineNumberStatementContext_cls);
    Py_XDECREF(StatementContext_cls);
    Py_XDECREF(LabelContext_cls);
    Py_XDECREF(DataDefinitionContext_cls);
    Py_XDECREF(CompressStatementContext_cls);
    Py_XDECREF(CompressEndContext_cls);
    Py_XDECREF(InputStatementContext_cls);
    Py_XDECREF(InputOptionsContext_cls);
    Py_XDECREF(InputUsingMapContext_cls);
    Py_XDECREF(VariableContext_cls);
    Py_XDECREF(ReinputStatementContext_cls);
    Py_XDECREF(ReinputOptionsContext_cls);
    Py_XDECREF(SortStatementContext_cls);
    Py_XDECREF(ExamineStatementContext_cls);
    Py_XDECREF(ExamineOptionsContext_cls);
    Py_XDECREF(MoveStatementContext_cls);
    Py_XDECREF(MoveOptionsContext_cls);
    Py_XDECREF(RepeatStatementContext_cls);
    Py_XDECREF(DoStatementContext_cls);
    Py_XDECREF(StoreStatementContext_cls);
    Py_XDECREF(StorePreview2Context_cls);
    Py_XDECREF(StoreConditionContext_cls);
    Py_XDECREF(FindStatementContext_cls);
    Py_XDECREF(FindQueryContext_cls);
    Py_XDECREF(FindNumberContext_cls);
    Py_XDECREF(FindPreview1Context_cls);
    Py_XDECREF(FindPreview2Context_cls);
    Py_XDECREF(ReadStatementContext_cls);
    Py_XDECREF(ReadQueryContext_cls);
    Py_XDECREF(ReadPreview1Context_cls);
    Py_XDECREF(ReadPreview2Context_cls);
    Py_XDECREF(UpdateStatementContext_cls);
    Py_XDECREF(UpdateStartlineContext_cls);
    Py_XDECREF(DeleteStatementContext_cls);
    Py_XDECREF(GetStatementsContext_cls);
    Py_XDECREF(GetTabledStatementsContext_cls);
    Py_XDECREF(GetTabledOptionsContext_cls);
    Py_XDECREF(GetTransactionStatementContext_cls);
    Py_XDECREF(GetSameStatementContext_cls);
    Py_XDECREF(HistogramStatementContext_cls);
    Py_XDECREF(HistogramQueryContext_cls);
    Py_XDECREF(HistogramPreviewContext_cls);
    Py_XDECREF(HistogramOptionsContext_cls);
    Py_XDECREF(EndTransactionContext_cls);
    Py_XDECREF(BackoutTransactionContext_cls);
    Py_XDECREF(ReadworkfileStatementContext_cls);
    Py_XDECREF(WorkfilenumberOptionContext_cls);
    Py_XDECREF(ReadworkfileOptionsContext_cls);
    Py_XDECREF(AtEndOfFileStatementContext_cls);
    Py_XDECREF(WriteworkfileStatementContext_cls);
    Py_XDECREF(CloseworkfileStatementContext_cls);
    Py_XDECREF(NoRecordsFoundStatementContext_cls);
    Py_XDECREF(AtStartOfDataStatementContext_cls);
    Py_XDECREF(FormatStatementContext_cls);
    Py_XDECREF(FormatOptionsContext_cls);
    Py_XDECREF(AssignmentStatementContext_cls);
    Py_XDECREF(IncludeStatementContext_cls);
    Py_XDECREF(RedefineStatementContext_cls);
    Py_XDECREF(RedefineBodyContext_cls);
    Py_XDECREF(ResetStatementContext_cls);
    Py_XDECREF(CallnatStatementContext_cls);
    Py_XDECREF(SetkeyStatementContext_cls);
    Py_XDECREF(PerformStatementContext_cls);
    Py_XDECREF(SubroutineNamesContext_cls);
    Py_XDECREF(FetchStatementContext_cls);
    Py_XDECREF(CallStatementContext_cls);
    Py_XDECREF(ForStatementContext_cls);
    Py_XDECREF(AcceptRejectIfStatementContext_cls);
    Py_XDECREF(DecisionStatementContext_cls);
    Py_XDECREF(IfStatementContext_cls);
    Py_XDECREF(IfStructuredStatementContext_cls);
    Py_XDECREF(ElseStructuredContext_cls);
    Py_XDECREF(IfElseStatementContext_cls);
    Py_XDECREF(IfMultilinedStatementContext_cls);
    Py_XDECREF(IfSinglelinedStatementContext_cls);
    Py_XDECREF(ElseMultilinedStatementContext_cls);
    Py_XDECREF(ElseSinglelinedStatementContext_cls);
    Py_XDECREF(OnelinerBodyContext_cls);
    Py_XDECREF(ConditionContext_cls);
    Py_XDECREF(OptionalConditionContext_cls);
    Py_XDECREF(OperandContext_cls);
    Py_XDECREF(NaturalKeywordsContext_cls);
    Py_XDECREF(LogicalOpContext_cls);
    Py_XDECREF(SubroutineContext_cls);
    Py_XDECREF(BlockContentSubroutineContext_cls);
    Py_XDECREF(SubroutineStatementContext_cls);
    Py_XDECREF(FunctionDefinitionContext_cls);
    Py_XDECREF(BlockContentContext_cls);
    Py_XDECREF(ValueAssignmentContext_cls);
    Py_XDECREF(AssignStatementContext_cls);
    Py_XDECREF(AddOperationContext_cls);
    Py_XDECREF(MultiplyOperationContext_cls);
    Py_XDECREF(SubtractOperationContext_cls);
    Py_XDECREF(DivideOperationContext_cls);
    Py_XDECREF(ComputeOperationContext_cls);
    Py_XDECREF(ArithmaticOperationContext_cls);
    Py_XDECREF(OptionalComputeContext_cls);
    Py_XDECREF(CalculationsContext_cls);
    Py_XDECREF(AddContentContext_cls);
    Py_XDECREF(CompOpContext_cls);
    Py_XDECREF(ArithmaticOpContext_cls);
    Py_XDECREF(EndStatementContext_cls);
    Py_XDECREF(OtherStatementContext_cls);
}


antlrcpp::Any SA_NaturalTranslator::visitProgram(NaturalParser::ProgramContext *ctx){
    if(!ProgramContext_cls) ProgramContext_cls = PyObject_GetAttrString(translator->parser_cls, "ProgramContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ProgramContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitLineNumberStatement(NaturalParser::LineNumberStatementContext *ctx){
    if(!LineNumberStatementContext_cls) LineNumberStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "LineNumberStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LineNumberStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitStatement(NaturalParser::StatementContext *ctx){
    if(!StatementContext_cls) StatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "StatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, StatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitLabel(NaturalParser::LabelContext *ctx){
    if(!LabelContext_cls) LabelContext_cls = PyObject_GetAttrString(translator->parser_cls, "LabelContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LabelContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitDataDefinition(NaturalParser::DataDefinitionContext *ctx){
    if(!DataDefinitionContext_cls) DataDefinitionContext_cls = PyObject_GetAttrString(translator->parser_cls, "DataDefinitionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DataDefinitionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitCompressStatement(NaturalParser::CompressStatementContext *ctx){
    if(!CompressStatementContext_cls) CompressStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "CompressStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CompressStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitCompressEnd(NaturalParser::CompressEndContext *ctx){
    if(!CompressEndContext_cls) CompressEndContext_cls = PyObject_GetAttrString(translator->parser_cls, "CompressEndContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CompressEndContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitInputStatement(NaturalParser::InputStatementContext *ctx){
    if(!InputStatementContext_cls) InputStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "InputStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InputStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitInputOptions(NaturalParser::InputOptionsContext *ctx){
    if(!InputOptionsContext_cls) InputOptionsContext_cls = PyObject_GetAttrString(translator->parser_cls, "InputOptionsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InputOptionsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitInputUsingMap(NaturalParser::InputUsingMapContext *ctx){
    if(!InputUsingMapContext_cls) InputUsingMapContext_cls = PyObject_GetAttrString(translator->parser_cls, "InputUsingMapContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InputUsingMapContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitVariable(NaturalParser::VariableContext *ctx){
    if(!VariableContext_cls) VariableContext_cls = PyObject_GetAttrString(translator->parser_cls, "VariableContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, VariableContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitReinputStatement(NaturalParser::ReinputStatementContext *ctx){
    if(!ReinputStatementContext_cls) ReinputStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "ReinputStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ReinputStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitReinputOptions(NaturalParser::ReinputOptionsContext *ctx){
    if(!ReinputOptionsContext_cls) ReinputOptionsContext_cls = PyObject_GetAttrString(translator->parser_cls, "ReinputOptionsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ReinputOptionsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitSortStatement(NaturalParser::SortStatementContext *ctx){
    if(!SortStatementContext_cls) SortStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "SortStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SortStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitExamineStatement(NaturalParser::ExamineStatementContext *ctx){
    if(!ExamineStatementContext_cls) ExamineStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExamineStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExamineStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitExamineOptions(NaturalParser::ExamineOptionsContext *ctx){
    if(!ExamineOptionsContext_cls) ExamineOptionsContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExamineOptionsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExamineOptionsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitMoveStatement(NaturalParser::MoveStatementContext *ctx){
    if(!MoveStatementContext_cls) MoveStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "MoveStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MoveStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitMoveOptions(NaturalParser::MoveOptionsContext *ctx){
    if(!MoveOptionsContext_cls) MoveOptionsContext_cls = PyObject_GetAttrString(translator->parser_cls, "MoveOptionsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MoveOptionsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitRepeatStatement(NaturalParser::RepeatStatementContext *ctx){
    if(!RepeatStatementContext_cls) RepeatStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "RepeatStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, RepeatStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitDoStatement(NaturalParser::DoStatementContext *ctx){
    if(!DoStatementContext_cls) DoStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "DoStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DoStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitStoreStatement(NaturalParser::StoreStatementContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"tableName", static_cast<void*>(ctx->tableName)}
    };
    if(!StoreStatementContext_cls) StoreStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "StoreStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, StoreStatementContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitStorePreview2(NaturalParser::StorePreview2Context *ctx){
    if(!StorePreview2Context_cls) StorePreview2Context_cls = PyObject_GetAttrString(translator->parser_cls, "StorePreview2Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, StorePreview2Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitStoreCondition(NaturalParser::StoreConditionContext *ctx){
    if(!StoreConditionContext_cls) StoreConditionContext_cls = PyObject_GetAttrString(translator->parser_cls, "StoreConditionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, StoreConditionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitFindStatement(NaturalParser::FindStatementContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"endBlock", static_cast<void*>(ctx->endBlock)}
    };
    if(!FindStatementContext_cls) FindStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "FindStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FindStatementContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitFindQuery(NaturalParser::FindQueryContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"tableName", static_cast<void*>(ctx->tableName)}
    };
    if(!FindQueryContext_cls) FindQueryContext_cls = PyObject_GetAttrString(translator->parser_cls, "FindQueryContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FindQueryContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitFindNumber(NaturalParser::FindNumberContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"tableName", static_cast<void*>(ctx->tableName)}
    };
    if(!FindNumberContext_cls) FindNumberContext_cls = PyObject_GetAttrString(translator->parser_cls, "FindNumberContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FindNumberContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitFindPreview1(NaturalParser::FindPreview1Context *ctx){
    if(!FindPreview1Context_cls) FindPreview1Context_cls = PyObject_GetAttrString(translator->parser_cls, "FindPreview1Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FindPreview1Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitFindPreview2(NaturalParser::FindPreview2Context *ctx){
    if(!FindPreview2Context_cls) FindPreview2Context_cls = PyObject_GetAttrString(translator->parser_cls, "FindPreview2Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FindPreview2Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitReadStatement(NaturalParser::ReadStatementContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"endBlock", static_cast<void*>(ctx->endBlock)}
    };
    if(!ReadStatementContext_cls) ReadStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "ReadStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ReadStatementContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitReadQuery(NaturalParser::ReadQueryContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"tableName", static_cast<void*>(ctx->tableName)}
    };
    if(!ReadQueryContext_cls) ReadQueryContext_cls = PyObject_GetAttrString(translator->parser_cls, "ReadQueryContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ReadQueryContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitReadPreview1(NaturalParser::ReadPreview1Context *ctx){
    if(!ReadPreview1Context_cls) ReadPreview1Context_cls = PyObject_GetAttrString(translator->parser_cls, "ReadPreview1Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ReadPreview1Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitReadPreview2(NaturalParser::ReadPreview2Context *ctx){
    if(!ReadPreview2Context_cls) ReadPreview2Context_cls = PyObject_GetAttrString(translator->parser_cls, "ReadPreview2Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ReadPreview2Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitUpdateStatement(NaturalParser::UpdateStatementContext *ctx){
    if(!UpdateStatementContext_cls) UpdateStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "UpdateStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, UpdateStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitUpdateStartline(NaturalParser::UpdateStartlineContext *ctx){
    if(!UpdateStartlineContext_cls) UpdateStartlineContext_cls = PyObject_GetAttrString(translator->parser_cls, "UpdateStartlineContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, UpdateStartlineContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitDeleteStatement(NaturalParser::DeleteStatementContext *ctx){
    if(!DeleteStatementContext_cls) DeleteStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "DeleteStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DeleteStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitGetStatements(NaturalParser::GetStatementsContext *ctx){
    if(!GetStatementsContext_cls) GetStatementsContext_cls = PyObject_GetAttrString(translator->parser_cls, "GetStatementsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, GetStatementsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitGetTabledStatements(NaturalParser::GetTabledStatementsContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"tableName", static_cast<void*>(ctx->tableName)},
        {"filterCondition", static_cast<void*>(ctx->filterCondition)}
    };
    if(!GetTabledStatementsContext_cls) GetTabledStatementsContext_cls = PyObject_GetAttrString(translator->parser_cls, "GetTabledStatementsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, GetTabledStatementsContext_cls, labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitGetTabledOptions(NaturalParser::GetTabledOptionsContext *ctx){
    if(!GetTabledOptionsContext_cls) GetTabledOptionsContext_cls = PyObject_GetAttrString(translator->parser_cls, "GetTabledOptionsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, GetTabledOptionsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitGetTransactionStatement(NaturalParser::GetTransactionStatementContext *ctx){
    if(!GetTransactionStatementContext_cls) GetTransactionStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "GetTransactionStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, GetTransactionStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitGetSameStatement(NaturalParser::GetSameStatementContext *ctx){
    if(!GetSameStatementContext_cls) GetSameStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "GetSameStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, GetSameStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitHistogramStatement(NaturalParser::HistogramStatementContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"endBlock", static_cast<void*>(ctx->endBlock)}
    };
    if(!HistogramStatementContext_cls) HistogramStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "HistogramStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, HistogramStatementContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitHistogramQuery(NaturalParser::HistogramQueryContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"tableName", static_cast<void*>(ctx->tableName)}
    };
    if(!HistogramQueryContext_cls) HistogramQueryContext_cls = PyObject_GetAttrString(translator->parser_cls, "HistogramQueryContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, HistogramQueryContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitHistogramPreview(NaturalParser::HistogramPreviewContext *ctx){
    if(!HistogramPreviewContext_cls) HistogramPreviewContext_cls = PyObject_GetAttrString(translator->parser_cls, "HistogramPreviewContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, HistogramPreviewContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitHistogramOptions(NaturalParser::HistogramOptionsContext *ctx){
    if(!HistogramOptionsContext_cls) HistogramOptionsContext_cls = PyObject_GetAttrString(translator->parser_cls, "HistogramOptionsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, HistogramOptionsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitEndTransaction(NaturalParser::EndTransactionContext *ctx){
    if(!EndTransactionContext_cls) EndTransactionContext_cls = PyObject_GetAttrString(translator->parser_cls, "EndTransactionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, EndTransactionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitBackoutTransaction(NaturalParser::BackoutTransactionContext *ctx){
    if(!BackoutTransactionContext_cls) BackoutTransactionContext_cls = PyObject_GetAttrString(translator->parser_cls, "BackoutTransactionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, BackoutTransactionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitReadworkfileStatement(NaturalParser::ReadworkfileStatementContext *ctx){
    if(!ReadworkfileStatementContext_cls) ReadworkfileStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "ReadworkfileStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ReadworkfileStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitWorkfilenumberOption(NaturalParser::WorkfilenumberOptionContext *ctx){
    if(!WorkfilenumberOptionContext_cls) WorkfilenumberOptionContext_cls = PyObject_GetAttrString(translator->parser_cls, "WorkfilenumberOptionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, WorkfilenumberOptionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitReadworkfileOptions(NaturalParser::ReadworkfileOptionsContext *ctx){
    if(!ReadworkfileOptionsContext_cls) ReadworkfileOptionsContext_cls = PyObject_GetAttrString(translator->parser_cls, "ReadworkfileOptionsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ReadworkfileOptionsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitAtEndOfFileStatement(NaturalParser::AtEndOfFileStatementContext *ctx){
    if(!AtEndOfFileStatementContext_cls) AtEndOfFileStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "AtEndOfFileStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AtEndOfFileStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitWriteworkfileStatement(NaturalParser::WriteworkfileStatementContext *ctx){
    if(!WriteworkfileStatementContext_cls) WriteworkfileStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "WriteworkfileStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, WriteworkfileStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitCloseworkfileStatement(NaturalParser::CloseworkfileStatementContext *ctx){
    if(!CloseworkfileStatementContext_cls) CloseworkfileStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "CloseworkfileStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CloseworkfileStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitNoRecordsFoundStatement(NaturalParser::NoRecordsFoundStatementContext *ctx){
    if(!NoRecordsFoundStatementContext_cls) NoRecordsFoundStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "NoRecordsFoundStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NoRecordsFoundStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitAtStartOfDataStatement(NaturalParser::AtStartOfDataStatementContext *ctx){
    if(!AtStartOfDataStatementContext_cls) AtStartOfDataStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "AtStartOfDataStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AtStartOfDataStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitFormatStatement(NaturalParser::FormatStatementContext *ctx){
    if(!FormatStatementContext_cls) FormatStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "FormatStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FormatStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitFormatOptions(NaturalParser::FormatOptionsContext *ctx){
    if(!FormatOptionsContext_cls) FormatOptionsContext_cls = PyObject_GetAttrString(translator->parser_cls, "FormatOptionsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FormatOptionsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitAssignmentStatement(NaturalParser::AssignmentStatementContext *ctx){
    if(!AssignmentStatementContext_cls) AssignmentStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "AssignmentStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AssignmentStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitIncludeStatement(NaturalParser::IncludeStatementContext *ctx){
    if(!IncludeStatementContext_cls) IncludeStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "IncludeStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, IncludeStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitRedefineStatement(NaturalParser::RedefineStatementContext *ctx){
    if(!RedefineStatementContext_cls) RedefineStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "RedefineStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, RedefineStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitRedefineBody(NaturalParser::RedefineBodyContext *ctx){
    if(!RedefineBodyContext_cls) RedefineBodyContext_cls = PyObject_GetAttrString(translator->parser_cls, "RedefineBodyContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, RedefineBodyContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitResetStatement(NaturalParser::ResetStatementContext *ctx){
    if(!ResetStatementContext_cls) ResetStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "ResetStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ResetStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitCallnatStatement(NaturalParser::CallnatStatementContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"subprogramName", static_cast<void*>(ctx->subprogramName)}
    };
    if(!CallnatStatementContext_cls) CallnatStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "CallnatStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CallnatStatementContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitSetkeyStatement(NaturalParser::SetkeyStatementContext *ctx){
    if(!SetkeyStatementContext_cls) SetkeyStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "SetkeyStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SetkeyStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitPerformStatement(NaturalParser::PerformStatementContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"subroutineName", static_cast<void*>(ctx->subroutineName)}
    };
    if(!PerformStatementContext_cls) PerformStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "PerformStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PerformStatementContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitSubroutineNames(NaturalParser::SubroutineNamesContext *ctx){
    if(!SubroutineNamesContext_cls) SubroutineNamesContext_cls = PyObject_GetAttrString(translator->parser_cls, "SubroutineNamesContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SubroutineNamesContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitFetchStatement(NaturalParser::FetchStatementContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"subprogramName", static_cast<void*>(ctx->subprogramName)}
    };
    if(!FetchStatementContext_cls) FetchStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "FetchStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FetchStatementContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitCallStatement(NaturalParser::CallStatementContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"subprogramName", static_cast<void*>(ctx->subprogramName)}
    };
    if(!CallStatementContext_cls) CallStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "CallStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CallStatementContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitForStatement(NaturalParser::ForStatementContext *ctx){
    if(!ForStatementContext_cls) ForStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "ForStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ForStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitAcceptRejectIfStatement(NaturalParser::AcceptRejectIfStatementContext *ctx){
    if(!AcceptRejectIfStatementContext_cls) AcceptRejectIfStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "AcceptRejectIfStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AcceptRejectIfStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitDecisionStatement(NaturalParser::DecisionStatementContext *ctx){
    if(!DecisionStatementContext_cls) DecisionStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "DecisionStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DecisionStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitIfStatement(NaturalParser::IfStatementContext *ctx){
    if(!IfStatementContext_cls) IfStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "IfStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, IfStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitIfStructuredStatement(NaturalParser::IfStructuredStatementContext *ctx){
    if(!IfStructuredStatementContext_cls) IfStructuredStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "IfStructuredStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, IfStructuredStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitElseStructured(NaturalParser::ElseStructuredContext *ctx){
    if(!ElseStructuredContext_cls) ElseStructuredContext_cls = PyObject_GetAttrString(translator->parser_cls, "ElseStructuredContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ElseStructuredContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitIfElseStatement(NaturalParser::IfElseStatementContext *ctx){
    if(!IfElseStatementContext_cls) IfElseStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "IfElseStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, IfElseStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitIfMultilinedStatement(NaturalParser::IfMultilinedStatementContext *ctx){
    if(!IfMultilinedStatementContext_cls) IfMultilinedStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "IfMultilinedStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, IfMultilinedStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitIfSinglelinedStatement(NaturalParser::IfSinglelinedStatementContext *ctx){
    if(!IfSinglelinedStatementContext_cls) IfSinglelinedStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "IfSinglelinedStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, IfSinglelinedStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitElseMultilinedStatement(NaturalParser::ElseMultilinedStatementContext *ctx){
    if(!ElseMultilinedStatementContext_cls) ElseMultilinedStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "ElseMultilinedStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ElseMultilinedStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitElseSinglelinedStatement(NaturalParser::ElseSinglelinedStatementContext *ctx){
    if(!ElseSinglelinedStatementContext_cls) ElseSinglelinedStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "ElseSinglelinedStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ElseSinglelinedStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitOnelinerBody(NaturalParser::OnelinerBodyContext *ctx){
    if(!OnelinerBodyContext_cls) OnelinerBodyContext_cls = PyObject_GetAttrString(translator->parser_cls, "OnelinerBodyContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, OnelinerBodyContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitCondition(NaturalParser::ConditionContext *ctx){
    if(!ConditionContext_cls) ConditionContext_cls = PyObject_GetAttrString(translator->parser_cls, "ConditionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ConditionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitOptionalCondition(NaturalParser::OptionalConditionContext *ctx){
    if(!OptionalConditionContext_cls) OptionalConditionContext_cls = PyObject_GetAttrString(translator->parser_cls, "OptionalConditionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, OptionalConditionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitOperand(NaturalParser::OperandContext *ctx){
    if(!OperandContext_cls) OperandContext_cls = PyObject_GetAttrString(translator->parser_cls, "OperandContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, OperandContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitNaturalKeywords(NaturalParser::NaturalKeywordsContext *ctx){
    if(!NaturalKeywordsContext_cls) NaturalKeywordsContext_cls = PyObject_GetAttrString(translator->parser_cls, "NaturalKeywordsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NaturalKeywordsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitLogicalOp(NaturalParser::LogicalOpContext *ctx){
    if(!LogicalOpContext_cls) LogicalOpContext_cls = PyObject_GetAttrString(translator->parser_cls, "LogicalOpContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LogicalOpContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitSubroutine(NaturalParser::SubroutineContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"subroutineName", static_cast<void*>(ctx->subroutineName)},
        {"subroutineBody", static_cast<void*>(ctx->subroutineBody)}
    };
    if(!SubroutineContext_cls) SubroutineContext_cls = PyObject_GetAttrString(translator->parser_cls, "SubroutineContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SubroutineContext_cls, labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitBlockContentSubroutine(NaturalParser::BlockContentSubroutineContext *ctx){
    if(!BlockContentSubroutineContext_cls) BlockContentSubroutineContext_cls = PyObject_GetAttrString(translator->parser_cls, "BlockContentSubroutineContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, BlockContentSubroutineContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitSubroutineStatement(NaturalParser::SubroutineStatementContext *ctx){
    if(!SubroutineStatementContext_cls) SubroutineStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "SubroutineStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SubroutineStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitFunctionDefinition(NaturalParser::FunctionDefinitionContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"functionName", static_cast<void*>(ctx->functionName)},
        {"returnType", static_cast<void*>(ctx->returnType)},
        {"functionBody", static_cast<void*>(ctx->functionBody)}
    };
    if(!FunctionDefinitionContext_cls) FunctionDefinitionContext_cls = PyObject_GetAttrString(translator->parser_cls, "FunctionDefinitionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FunctionDefinitionContext_cls, labels, 3);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitBlockContent(NaturalParser::BlockContentContext *ctx){
    if(!BlockContentContext_cls) BlockContentContext_cls = PyObject_GetAttrString(translator->parser_cls, "BlockContentContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, BlockContentContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitValueAssignment(NaturalParser::ValueAssignmentContext *ctx){
    if(!ValueAssignmentContext_cls) ValueAssignmentContext_cls = PyObject_GetAttrString(translator->parser_cls, "ValueAssignmentContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ValueAssignmentContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitAssignStatement(NaturalParser::AssignStatementContext *ctx){
    if(!AssignStatementContext_cls) AssignStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "AssignStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AssignStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitAddOperation(NaturalParser::AddOperationContext *ctx){
    if(!AddOperationContext_cls) AddOperationContext_cls = PyObject_GetAttrString(translator->parser_cls, "AddOperationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AddOperationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitMultiplyOperation(NaturalParser::MultiplyOperationContext *ctx){
    if(!MultiplyOperationContext_cls) MultiplyOperationContext_cls = PyObject_GetAttrString(translator->parser_cls, "MultiplyOperationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MultiplyOperationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitSubtractOperation(NaturalParser::SubtractOperationContext *ctx){
    if(!SubtractOperationContext_cls) SubtractOperationContext_cls = PyObject_GetAttrString(translator->parser_cls, "SubtractOperationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SubtractOperationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitDivideOperation(NaturalParser::DivideOperationContext *ctx){
    if(!DivideOperationContext_cls) DivideOperationContext_cls = PyObject_GetAttrString(translator->parser_cls, "DivideOperationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DivideOperationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitComputeOperation(NaturalParser::ComputeOperationContext *ctx){
    if(!ComputeOperationContext_cls) ComputeOperationContext_cls = PyObject_GetAttrString(translator->parser_cls, "ComputeOperationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ComputeOperationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitArithmaticOperation(NaturalParser::ArithmaticOperationContext *ctx){
    if(!ArithmaticOperationContext_cls) ArithmaticOperationContext_cls = PyObject_GetAttrString(translator->parser_cls, "ArithmaticOperationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ArithmaticOperationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitOptionalCompute(NaturalParser::OptionalComputeContext *ctx){
    if(!OptionalComputeContext_cls) OptionalComputeContext_cls = PyObject_GetAttrString(translator->parser_cls, "OptionalComputeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, OptionalComputeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitCalculations(NaturalParser::CalculationsContext *ctx){
    if(!CalculationsContext_cls) CalculationsContext_cls = PyObject_GetAttrString(translator->parser_cls, "CalculationsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CalculationsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitAddContent(NaturalParser::AddContentContext *ctx){
    if(!AddContentContext_cls) AddContentContext_cls = PyObject_GetAttrString(translator->parser_cls, "AddContentContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AddContentContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitCompOp(NaturalParser::CompOpContext *ctx){
    if(!CompOpContext_cls) CompOpContext_cls = PyObject_GetAttrString(translator->parser_cls, "CompOpContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CompOpContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitArithmaticOp(NaturalParser::ArithmaticOpContext *ctx){
    if(!ArithmaticOpContext_cls) ArithmaticOpContext_cls = PyObject_GetAttrString(translator->parser_cls, "ArithmaticOpContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ArithmaticOpContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitEndStatement(NaturalParser::EndStatementContext *ctx){
    if(!EndStatementContext_cls) EndStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "EndStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, EndStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_NaturalTranslator::visitOtherStatement(NaturalParser::OtherStatementContext *ctx){
    if(!OtherStatementContext_cls) OtherStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "OtherStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, OtherStatementContext_cls);
    return py_ctx;
}
