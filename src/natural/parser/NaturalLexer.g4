lexer grammar NaturalLexer;

// Natural Keywords Start Here
DEFINE: 'DEFINE';
FUNCTION: 'FUNCTION';
RETURNS: 'RETURNS';
DATA: 'DATA';
LOCAL: 'LOCAL';
GLOBAL: 'GLOBAL';
PARAMETER: 'PARAMETER';
REDEFINE: 'REDEFINE';
PERFORM: 'PERFORM';
CALLNAT: 'CALLNAT';
ESCAPE: 'ESCAPE';
ESCAPE_BOTTOM: 'ESCAPE BOTTOM';
RETURN: 'RETURN';
IF: 'IF';
THEN: 'THEN'; // Added token for THEN
ELSE: 'ELSE';
ELSE_IF: 'ELSE IF';
END_IF: 'END-IF'; // Added token for END-IF
DECIDE: 'DECIDE';
END_DECIDE: 'END-DECIDE';
WHEN: 'WHEN';
FOR: 'FOR';
THRU: 'THRU';
EVERY: 'EVERY';
FIRST: 'FIRST';
CONDITION: 'CONDITION';
ANY: 'ANY';
NONE: 'NONE';
ALL: 'ALL';
UNIQUE_LEX : 'UNIQUE';
REPEAT: 'REPEAT';
LOOP: 'LOOP' (WS? LINE_REF)?;
END_FOR: 'END-FOR';
END: 'END';
READ: 'READ';
FIND: 'FIND';
SELECT: 'SELECT';
UPDATE: 'UPDATE';
STORE: 'STORE';
DELETE: 'DELETE';
GET: 'GET';
OBTAIN: 'OBTAIN';
ADD: 'ADD';
SUBTRACT: 'SUBTRACT';
MULTIPLY: 'MULTIPLY';
DIVIDE: 'DIVIDE';
MOVE: 'MOVE';
VALUE_OF: 'VALUE OF';
TO: 'TO';
DO:'DO';
DEFINE_SUBROUTINE: 'DEFINE SUBROUTINE';
END_SUBROUTINE: 'END-SUBROUTINE';
DEFINE_SUBPROGRAM: 'DEFINE SUBPROGRAM';
END_SUBPROGRAM: 'END-SUBPROGRAM';
DEFINE_FUNCTION: 'DEFINE FUNCTION';
END_FUNCTION: 'END-FUNCTION';
END_READ: 'END-READ';
END_FIND: 'END-FIND';
END_SELECT: 'END-SELECT';
END_TRANSACTION: 'END TRANSACTION';
BACKOUT_TRANSACTION: 'BACKOUT TRANSACTION';
END_ALL: 'END-ALL';
VALUE: 'VALUE';
DOEND: 'DOEND';
USING_HELP: 'USING HELP';
USING: 'USING'; // Added token for USING
COMPUTE: 'COMPUTE';
INPUT: 'INPUT';
MAP : 'MAP';
RESET: 'RESET';
SET_KEY: 'SET KEY';
COMPRESS: 'COMPRESS';
NO_RECORDS_FOUND: 'NO RECORDS FOUND';
NO_RECORD_FOUND: 'NO RECORD FOUND';
END_NOREC: 'END-NOREC';
REINPUT: 'REINPUT';
MARK: 'MARK';
WITH_TEXT: 'WITH TEXT';
FULL: 'FULL';
POSITION: 'POSITION';
IN: 'IN';
ALARM: 'ALARM';
RECORD: 'RECORD';
RECORDS: 'RECORDS';
STATEMENT: 'STATEMENT';
SET: 'SET';
SAME: 'SAME';
GET_TRANSACTION_DATA: 'GET TRANSACTION DATA';
GET_SAME: 'GET SAME';
WITH          : 'WITH';
ACCEPT_IF: 'ACCEPT IF';
REJECT_IF: 'REJECT IF';
EXAMINE: 'EXAMINE';
SUBSTRING: 'SUBSTRING';
REPLACE: 'REPLACE';
GIVING: 'GIVING';
ABSOLUTE: 'ABSOLUTE';
CHARPOSITION: 'CHARPOSITION';
CHARLENGTH: 'CHARLENGTH';
LENGTH: 'LENGTH';
NUMBER: 'NUMBER';
TRANSLATE: 'TRANSLATE';
DELIMITER: 'DELIMITER';
UPPPER_CASE: 'UPPPER CASE';
LOWER_CASE: 'LOWER CASE';
INTO: 'INTO';
INVERTED: 'INVERTED';
INDEX: 'INDEX';
INDEXED: 'INDEXED';
PATTERN: 'PATTERN';
DISPLAY: 'DISPLAY';
WRITE: 'WRITE';
WRITE_TITLE: 'WRITE TITLE';
WRITE_TRAILER: 'WRITE TRAILER';
FIELD: 'FIELD';
BY_NAME: 'BY NAME';
BY_POSITION: 'BY POSITION';
EDITED: 'EDITED';
LEFT: 'LEFT';
RIGHT: 'RIGHT';
JUSTIFIED: 'JUSTIFIED';
NORMALIZED: 'NORMALIZED';
ENCODED: 'ENCODED';
ROUNDED: 'ROUNDED';
SEPARATE: 'SEPARATE';
SORT: 'SORT';
END_SORT: 'END-SORT';
FORMAT: 'FORMAT';
SKIP_LEX: 'SKIP';
EJECT: 'EJECT';
NEWPAGE: 'NEWPAGE';
SUSPEND_IDENTICAL_SUPPRESS: 'SUSPEND IDENTICAL SUPPRESS';
DEFINE_PRINTER: 'DEFINE PRINTER';
CLOSE_PRINTER: 'CLOSE PRINTER';
DEFINE_WINDOW: 'DEFINE WINDOW';
SET_WINDOW: 'SET WINDOW';
PROCESS_PAGE: 'PROCESS PAGE';
PROCESS_PAGE_USING: 'PROCESS PAGE USING';
PROCESS_PAGE_UPDATE: 'PROCESS PAGE UPDATE';
PROCESS_PAGE_MODAL: 'PROCESS PAGE MODAL';
IF_SELECTION: 'IF SELECTION';
DECIDE_FOR: 'DECIDE FOR';
DECIDE_ON: 'DECIDE ON';
CALL: 'CALL';
CALL_FILE: 'CALL FILE';
CALL_LOOP: 'CALL LOOP';
FETCH: 'FETCH';
PROCESS_COMMAND: 'PROCESS COMMAND';
RUN: 'RUN';
DEFINE_PROTOTYPE: 'DEFINE PROTOTYPE';
FUNCTION_CALL: 'Function Call';
STOP: 'STOP';
TERMINATE: 'TERMINATE';
WRITE_WORK_FILE: 'WRITE WORK FILE';
WRITE_WORK: 'WRITE WORK';
DOWNLOAD_PC_FILE: 'DOWNLOAD PC FILE';
READ_WORK_FILE: 'READ WORK FILE';
READ_WORK: 'READ WORK';
UPLOAD_PC_FILE: 'UPLOAD PC FILE';
CLOSE_WORK_FILE: 'CLOSE WORK FILE';
CLOSE_WORK: 'CLOSE WORK';
CLOSE_PC_FILE: 'CLOSE PC FILE';
DEFINE_WORK_FILE: 'DEFINE WORK FILE';
DEFINE_CLASS: 'DEFINE CLASS';
CREATE_OBJECT: 'CREATE OBJECT';
SEND_METHOD: 'SEND METHOD';
INTERFACE: 'INTERFACE';
METHOD: 'METHOD';
PROPERTY: 'PROPERTY';
EXPAND: 'EXPAND';
REDUCE: 'REDUCE';
RESIZE: 'RESIZE';
OPEN_CONVERSATION: 'OPEN CONVERSATION';
CLOSE_CONVERSATION: 'CLOSE CONVERSATION';
DEFINE_DATA_CONTEXT: 'DEFINE DATA CONTEXT';
PARSE: 'PARSE';
REQUEST_DOCUMENT: 'REQUEST DOCUMENT';
RETRY: 'RETRY';
AT_START_OF_DATA: 'AT START OF DATA';
AT_END_OF_DATA: 'AT END OF DATA';
AT_BREAK: 'AT BREAK';
BEFORE_BREAK_PROCESSING: 'BEFORE BREAK PROCESSING';
PERFORM_BREAK_PROCESSING: 'PERFORM BREAK PROCESSING';
CALLDBPROC: 'CALLDBPROC';
COMMIT: 'COMMIT';
PROCESS_SQL: 'PROCESS SQL';
READ_RESULT_SET: 'READ RESULT SET';
ROLLBACK: 'ROLLBACK';
WRITE_PRINT: 'WRITE / PRINT';
AT_TOP_OF_PAGE: 'AT TOP OF PAGE';
AT_END_OF_PAGE: 'AT END OF PAGE';
DEFINE_DATA: 'DEFINE DATA';
END_DEFINE: 'END-DEFINE';
INCLUDE: 'INCLUDE';
ON_ERROR: 'ON ERROR';
RELEASE: 'RELEASE';
SET_CONTROL: 'SET CONTROL';
SET_GLOBALS: 'SET GLOBALS';
SET_TIME: 'SET TIME';
STACK: 'STACK';
ACCEPT: 'ACCEPT';
REJECT: 'REJECT';
PASSW: 'PASSW';
LIMIT: 'LIMIT';
INSERT: 'INSERT';
HISTOGRAM: 'HISTOGRAM';
END_HISTOGRAM: 'END-HISTOGRAM';
THEN_DO:'THEN_DO';
IGNORE: 'IGNORE';
FRAC: 'FRAC';
FROM: 'FROM';
VIEW: 'VIEW';
ASSIGN: 'ASSIGN';
NUMERIC: 'NUMERIC';
LEAVING_SPACE: 'LEAVING SPACE';
LEAVING_NO_SPACE: 'LEAVING NO' ' SPACE'?;
END_START:'END-START';
ON:'ON';
OFF:'OFF';
BY: 'BY';
INTERFACE4: 'INTERFACE4';
RETAIN_AS: 'RETAIN AS';
WHERE: 'WHERE';
STARTING_WITH: 'STARTING WITH';
COUPLED: 'COUPLED';
VIA: 'VIA';
BUT: 'BUT';
SORTED: 'SORTED';
ASCENDING: 'ASCENDING';
DESCENDING: 'DESCENDING';
OF: 'OF';
MULTI_FETCH: 'MULTI-FETCH';
STARTING_FROM: 'STARTING FROM';
ENDING_AT: 'ENDING AT';
VARIABLE: 'VARIABLE';
DYNAMIC: 'DYNAMIC';
SEQUENCE: 'SEQUENCE';
END_WORK: 'END-WORK';
OFFSET: 'OFFSET';
FILLER: 'FILLER';
ONCE: 'ONCE';
AT_END_OF_FILE: 'AT END OF FILE';
END_ENDFILE: 'END-ENDFILE';

// Textual comparison operators
GT_TEXT: 'GT';
LT_TEXT: 'LT';
GE_TEXT: 'GE';
LE_TEXT: 'LE';
EQ_TEXT: 'EQ';
NE_TEXT: 'NE';
AND_TEXT:'AND';
OR_TEXT:'OR';
NOT_TEXT: 'NOT';
AND_EQ:'AND=';
OR_RQ:'OR=';
OR_SRQ:'OR =';
EQUAL: 'EQUAL';
NOTEQUAL: 'NOTEQUAL';
EQUAL_TO: 'EQUAL TO';
LESS_THAN: 'LESS THAN';
GREATER_THAN: 'GREATER THAN';
LESS_EQUAL: 'LESS EQUAL';
GREATER_EQUAL: 'GREATER EQUAL';
// Natural Keywords End Here


// Correctly handle string literals and punctuation
STRING
    : '\'' ( ~('\'' | '\n' | '\r') | '\'\'' )* '\''
    | '"' ( ~('"' | '\n' | '\r') | '""' )* '"';
COLON: ':';
LINE_NUMBER: '-'? [0-9]+;
//NUMERIC: [0-9]+;
FLOAT: [0-9]* '.' [0-9]+;
LITERAL: [0-9]+('.'[0-9]+)?;
LINE_REF: '(' [0-9]+ ')';
INPUT_PARAM: '&' [0-9]+ '&';


DATE_CONSTANT: 'D' STRING;
H_CONSTANT: 'H' STRING;

// Operators as separate tokens
PLUS: '+';
MINUS: '-';
MULT: '*';
DIV: '/';
EQ: '=';

// Comparison operators
GT: '>';
LT: '<';
GE: '>=';
LE: '<=';
NE: '!=';

// Add tokens for parentheses
LPAREN: '(';
RPAREN: ')';

IDENTIFIER: (NESTED_PARENS | '*'? '#'? [a-zA-Z0-9_][a-zA-Z0-9-/:]*)+;

fragment NESTED_PARENS: '(' (NESTED_PARENS | ~[()])* ')';


// Capture 'DEFINE DATA' block content
//DEFINE_DATA_BLOCK: (LINE_NUMBER WS*)? 'DEFINE DATA' .*? 'END-DEFINE';

// Handling comments
//COMMENT: '*' ~[\r\n]* -> skip;
TRAILING_COMMENT: '/*' ~[\r\n]* -> skip;
WS: [ \t]+;
NL: [\r\n]+;

WS_C: [ \t]+ -> skip;
NL_C: [\r\n]+;

// Add a rule to handle commas
COMMA: ',';

MOD: '%';
AND: '&';
OR: '|';
XOR: '^';
NOT: '!';
TILDE: '~';
QUESTION: '?';
DOT: '.';
LBRACK: '[';
RBRACK: ']';
LBRACE: '{';
RBRACE: '}';


// Add token for labels
//LABEL: [A-Z]+ '.';
LABEL: 'DUMMY_TEXT';
