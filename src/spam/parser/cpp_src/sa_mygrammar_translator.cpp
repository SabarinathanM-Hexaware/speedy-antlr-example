/*
 * This file was auto-generated by speedy-antlr-tool
 *  https://github.com/amykyta3/speedy-antlr-tool
 */

#include "sa_mygrammar_translator.h"


SA_MyGrammarTranslator::SA_MyGrammarTranslator(speedy_antlr::Translator *translator) {
    this->translator = translator;
}

SA_MyGrammarTranslator::~SA_MyGrammarTranslator() {
}


antlrcpp::Any SA_MyGrammarTranslator::visitRoot(MyGrammarParser::RootContext *ctx){
    PyObject *py_ctx = translator->convert_ctx(this, ctx, "RootContext", nullptr);
    return py_ctx;
}

antlrcpp::Any SA_MyGrammarTranslator::visitBinaryExpr(MyGrammarParser::BinaryExprContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"op", static_cast<void*>(ctx->op)}
    };
    PyObject *py_ctx = translator->convert_ctx(this, ctx, "ExprContext", "BinaryExprContext", labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_MyGrammarTranslator::visitNOP(MyGrammarParser::NOPContext *ctx){
    PyObject *py_ctx = translator->convert_ctx(this, ctx, "ExprContext", "NOPContext");
    return py_ctx;
}

antlrcpp::Any SA_MyGrammarTranslator::visitTernaryExpr(MyGrammarParser::TernaryExprContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"one", static_cast<void*>(ctx->one)},
        {"two", static_cast<void*>(ctx->two)},
        {"three", static_cast<void*>(ctx->three)}
    };
    PyObject *py_ctx = translator->convert_ctx(this, ctx, "ExprContext", "TernaryExprContext", labels, 3);
    return py_ctx;
}

antlrcpp::Any SA_MyGrammarTranslator::visitLiteral(MyGrammarParser::LiteralContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"xnum", static_cast<void*>(ctx->xnum)},
        {"xstr", static_cast<void*>(ctx->xstr)}
    };
    PyObject *py_ctx = translator->convert_ctx(this, ctx, "LiteralContext", nullptr, labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_MyGrammarTranslator::visitNumber(MyGrammarParser::NumberContext *ctx){
    PyObject *py_ctx = translator->convert_ctx(this, ctx, "NumberContext", nullptr);
    return py_ctx;
}

antlrcpp::Any SA_MyGrammarTranslator::visitString_literal(MyGrammarParser::String_literalContext *ctx){
    PyObject *py_ctx = translator->convert_ctx(this, ctx, "String_literalContext", nullptr);
    return py_ctx;
}
