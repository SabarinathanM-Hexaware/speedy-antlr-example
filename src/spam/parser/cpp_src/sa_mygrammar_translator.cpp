/*
 * This file was auto-generated by speedy-antlr-tool v1.4.1
 *  https://github.com/amykyta3/speedy-antlr-tool
 */

#include "sa_mygrammar_translator.h"


SA_MyGrammarTranslator::SA_MyGrammarTranslator(speedy_antlr::Translator *translator) {
    this->translator = translator;
}

SA_MyGrammarTranslator::~SA_MyGrammarTranslator() {
    Py_XDECREF(RootContext_cls);
    Py_XDECREF(BinaryExprContext_cls);
    Py_XDECREF(NOPContext_cls);
    Py_XDECREF(TernaryExprContext_cls);
    Py_XDECREF(LiteralContext_cls);
    Py_XDECREF(NumberContext_cls);
    Py_XDECREF(String_literalContext_cls);
}


antlrcpp::Any SA_MyGrammarTranslator::visitRoot(MyGrammarParser::RootContext *ctx){
    if(!RootContext_cls) RootContext_cls = PyObject_GetAttrString(translator->parser_cls, "RootContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, RootContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_MyGrammarTranslator::visitBinaryExpr(MyGrammarParser::BinaryExprContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"op", static_cast<void*>(ctx->op)}
    };
    if(!BinaryExprContext_cls) BinaryExprContext_cls = PyObject_GetAttrString(translator->parser_cls, "BinaryExprContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, BinaryExprContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_MyGrammarTranslator::visitNOP(MyGrammarParser::NOPContext *ctx){
    if(!NOPContext_cls) NOPContext_cls = PyObject_GetAttrString(translator->parser_cls, "NOPContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NOPContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_MyGrammarTranslator::visitTernaryExpr(MyGrammarParser::TernaryExprContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"one", static_cast<void*>(ctx->one)},
        {"two", static_cast<void*>(ctx->two)},
        {"three", static_cast<void*>(ctx->three)}
    };
    if(!TernaryExprContext_cls) TernaryExprContext_cls = PyObject_GetAttrString(translator->parser_cls, "TernaryExprContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TernaryExprContext_cls, labels, 3);
    return py_ctx;
}

antlrcpp::Any SA_MyGrammarTranslator::visitLiteral(MyGrammarParser::LiteralContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"xnum", static_cast<void*>(ctx->xnum)},
        {"xstr", static_cast<void*>(ctx->xstr)}
    };
    if(!LiteralContext_cls) LiteralContext_cls = PyObject_GetAttrString(translator->parser_cls, "LiteralContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LiteralContext_cls, labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_MyGrammarTranslator::visitNumber(MyGrammarParser::NumberContext *ctx){
    if(!NumberContext_cls) NumberContext_cls = PyObject_GetAttrString(translator->parser_cls, "NumberContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NumberContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_MyGrammarTranslator::visitString_literal(MyGrammarParser::String_literalContext *ctx){
    if(!String_literalContext_cls) String_literalContext_cls = PyObject_GetAttrString(translator->parser_cls, "String_literalContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, String_literalContext_cls);
    return py_ctx;
}
